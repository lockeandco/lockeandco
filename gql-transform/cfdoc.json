{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {},
    "Parameters": {
        "AppSyncApiName": {
            "Type": "String",
            "Description": "The name of the AppSync API",
            "Default": "AppSyncSimpleTransform"
        },
        "DynamoDBModelTableReadIOPS": {
            "Type": "Number",
            "Description": "The number of read IOPS the table should support.",
            "Default": 5
        },
        "DynamoDBModelTableWriteIOPS": {
            "Type": "Number",
            "Description": "The number of write IOPS the table should support.",
            "Default": 5
        },
        "AuthCognitoUserPoolId": {
            "Type": "String",
            "Description": "The id of an existing User Pool to connect. If this is changed, a user pool will not be created for you.",
            "Default": "NONE"
        },
        "AuthCognitoUserPoolName": {
            "Type": "String",
            "Description": "The name of the AppSync API",
            "Default": "AppSyncUserPool"
        },
        "AuthCognitoUserPoolMobileClientName": {
            "Type": "String",
            "Description": "The name of the native user pool client.",
            "Default": "CognitoNativeClient"
        },
        "AuthCognitoUserPoolJSClientName": {
            "Type": "String",
            "Description": "The name of the web user pool client.",
            "Default": "CognitoJSClient"
        },
        "AuthCognitoUserPoolRefreshTokenValidity": {
            "Type": "Number",
            "Description": "The time limit, in days, after which the refresh token is no longer valid.",
            "Default": 30
        }
    },
    "Resources": {
        "GraphQLSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "Definition": "type Mutation {\n  createPost(input: CreatePostInput!): Post\n  updatePost(input: UpdatePostInput!): Post\n  deletePost(input: DeletePostInput!): Post\n  createComment(input: CreateCommentInput!): Comment\n  updateComment(input: UpdateCommentInput!): Comment\n  deleteComment(input: DeleteCommentInput!): Comment\n}\n\ntype Query {\n  getPost(id: ID!): Post\n  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection\n  getComment(id: ID!): Comment\n  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection\n}\n\ntype Subscription {\n  onCreatePost: Post @aws_subscribe(mutations: [\"createPost\"])\n  onUpdatePost: Post @aws_subscribe(mutations: [\"updatePost\"])\n  onDeletePost: Post @aws_subscribe(mutations: [\"deletePost\"])\n  onCreateComment: Comment @aws_subscribe(mutations: [\"createComment\"])\n  onUpdateComment: Comment @aws_subscribe(mutations: [\"updateComment\"])\n  onDeleteComment: Comment @aws_subscribe(mutations: [\"deleteComment\"])\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ntype ModelPostConnection {\n  items: [Post]\n  nextToken: String\n}\n\ninput ModelStringFilterInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n}\n\ninput ModelIDFilterInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n}\n\ninput ModelIntFilterInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  contains: Int\n  notContains: Int\n  between: [Int]\n}\n\ninput ModelFloatFilterInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  contains: Float\n  notContains: Float\n  between: [Float]\n}\n\ninput ModelBooleanFilterInput {\n  ne: Boolean\n  eq: Boolean\n}\n\ninput ModelPostFilterInput {\n  id: ModelIDFilterInput\n  title: ModelStringFilterInput\n  and: [ModelPostFilterInput]\n  or: [ModelPostFilterInput]\n  not: ModelPostFilterInput\n}\n\ninput CreatePostInput {\n  title: String!\n}\n\ninput UpdatePostInput {\n  id: ID!\n  title: String\n}\n\ninput DeletePostInput {\n  id: ID\n}\n\ntype Comment {\n  id: ID!\n  content: String!\n  post: Post\n}\n\ntype ModelCommentConnection {\n  items: [Comment]\n  nextToken: String\n}\n\ninput ModelCommentFilterInput {\n  id: ModelIDFilterInput\n  content: ModelStringFilterInput\n  and: [ModelCommentFilterInput]\n  or: [ModelCommentFilterInput]\n  not: ModelCommentFilterInput\n}\n\ninput CreateCommentInput {\n  content: String!\n  commentPostId: ID\n}\n\ninput UpdateCommentInput {\n  id: ID!\n  content: String\n  commentPostId: ID\n}\n\ninput DeleteCommentInput {\n  id: ID\n}\n"
            }
        },
        "GraphQLAPI": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
                "Name": {
                    "Ref": "AppSyncApiName"
                },
                "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
                "UserPoolConfig": {
                    "UserPoolId": {
                        "Fn::If": ["AuthShouldCreateUserPool", {
                            "Ref": "AuthCognitoUserPool"
                        }, {
                            "Ref": "AuthCognitoUserPoolId"
                        }]
                    },
                    "AwsRegion": {
                        "Ref": "AWS::Region"
                    },
                    "DefaultAction": "ALLOW"
                }
            }
        },
        "GraphQLAPIKey": {
            "Type": "AWS::AppSync::ApiKey",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                }
            }
        },
        "PostTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Fn::Join": ["-", ["Post", {
                        "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                    }]]
                },
                "KeySchema": [{
                    "AttributeName": "id",
                    "KeyType": "HASH"
                }],
                "AttributeDefinitions": [{
                    "AttributeName": "id",
                    "AttributeType": "S"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Ref": "DynamoDBModelTableReadIOPS"
                    },
                    "WriteCapacityUnits": {
                        "Ref": "DynamoDBModelTableWriteIOPS"
                    }
                },
                "StreamSpecification": {
                    "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
            }
        },
        "PostIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": ["-", ["PostTable", "role", {
                        "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                    }]]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "appsync.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Policies": [{
                    "PolicyName": "DynamoDBAccess",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": ["dynamodb:BatchGetItem", "dynamodb:BatchWriteItem", "dynamodb:PutItem", "dynamodb:DeleteItem", "dynamodb:GetItem", "dynamodb:Scan", "dynamodb:Query", "dynamodb:UpdateItem"],
                            "Resource": [{
                                "Fn::GetAtt": ["PostTable", "Arn"]
                            }, {
                                "Fn::Join": ["/", [{
                                    "Fn::GetAtt": ["PostTable", "Arn"]
                                }, "*"]]
                            }]
                        }]
                    }
                }]
            }
        },
        "PostDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "Name": "PostTable",
                "Type": "AMAZON_DYNAMODB",
                "ServiceRoleArn": {
                    "Fn::GetAtt": ["PostIAMRole", "Arn"]
                },
                "DynamoDBConfig": {
                    "AwsRegion": {
                        "Fn::Select": [3, {
                            "Fn::Split": [":", {
                                "Fn::GetAtt": ["PostTable", "Arn"]
                            }]
                        }]
                    },
                    "TableName": {
                        "Ref": "PostTable"
                    }
                }
            }
        },
        "GetPostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["PostDataSource", "Name"]
                },
                "FieldName": "getPost",
                "TypeName": "Query",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "ListPostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["PostDataSource", "Name"]
                },
                "FieldName": "listPosts",
                "TypeName": "Query",
                "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\":   #if( $context.args.filter )\n    $util.transform.toDynamoDBFilterExpression($ctx.args.filter)\n  #else\n    null\n  #end,\n  \"limit\": $limit,\n  \"nextToken\":   #if( $context.args.nextToken )\n    \"$context.args.nextToken\"\n  #else\n    null\n  #end\n}",
                "ResponseMappingTemplate": "$util.toJson($ctx.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "CreatePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["PostDataSource", "Name"]
                },
                "FieldName": "createPost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "## START: Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"createdAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"updatedAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"__typename\", \"Post\"))\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n      \"id\": {\n          \"S\": \"$util.autoId()\"\n    }\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n## END: Prepare DynamoDB PutItem Request. **",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "UpdatePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["PostDataSource", "Name"]
                },
                "FieldName": "updatePost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#if( $authCondition )\n  #set( $condition = $authCondition )\n$util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n$util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n#else\n  #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"__typename\", \"Post\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n    $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n    $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, [\"id\"]).entrySet() )\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entry.key\") )\n$util.qr($expNames.put(\"#$entry.key\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entry.key\", \":$entry.key\"))\n$util.qr($expNames.put(\"#$entry.key\", \"$entry.key\"))\n$util.qr($expValues.put(\":$entry.key\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n    #set( $expression = \"SET\" )\n      #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n    #set( $expression = \"$expression ADD\" )\n      #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n    #set( $expression = \"$expression REMOVE\" )\n      #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n$util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n$util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n      \"id\": {\n          \"S\": \"$context.args.input.id\"\n    }\n  },\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "DeletePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["PostDataSource", "Name"]
                },
                "FieldName": "deletePost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#if( $authCondition )\n  #set( $condition = $authCondition )\n$util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n$util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n#else\n  #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n    $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n      #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n    $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n      #set( $condition.expressionValues = $expressionValues )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n  \"condition\": $util.toJson($condition)\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "CommentTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Fn::Join": ["-", ["Comment", {
                        "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                    }]]
                },
                "KeySchema": [{
                    "AttributeName": "id",
                    "KeyType": "HASH"
                }],
                "AttributeDefinitions": [{
                    "AttributeName": "id",
                    "AttributeType": "S"
                }, {
                    "AttributeName": "commentPostId",
                    "AttributeType": "S"
                }],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Ref": "DynamoDBModelTableReadIOPS"
                    },
                    "WriteCapacityUnits": {
                        "Ref": "DynamoDBModelTableWriteIOPS"
                    }
                },
                "StreamSpecification": {
                    "StreamViewType": "NEW_AND_OLD_IMAGES"
                },
                "GlobalSecondaryIndexes": [{
                    "IndexName": "gsi-PostComments",
                    "KeySchema": [{
                        "AttributeName": "commentPostId",
                        "KeyType": "HASH"
                    }],
                    "Projection": {
                        "ProjectionType": "ALL"
                    },
                    "ProvisionedThroughput": {
                        "ReadCapacityUnits": {
                            "Ref": "DynamoDBModelTableReadIOPS"
                        },
                        "WriteCapacityUnits": {
                            "Ref": "DynamoDBModelTableWriteIOPS"
                        }
                    }
                }]
            }
        },
        "CommentIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": ["-", ["CommentTable", "role", {
                        "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                    }]]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "appsync.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Policies": [{
                    "PolicyName": "DynamoDBAccess",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": ["dynamodb:BatchGetItem", "dynamodb:BatchWriteItem", "dynamodb:PutItem", "dynamodb:DeleteItem", "dynamodb:GetItem", "dynamodb:Scan", "dynamodb:Query", "dynamodb:UpdateItem"],
                            "Resource": [{
                                "Fn::GetAtt": ["CommentTable", "Arn"]
                            }, {
                                "Fn::Join": ["/", [{
                                    "Fn::GetAtt": ["CommentTable", "Arn"]
                                }, "*"]]
                            }]
                        }]
                    }
                }]
            }
        },
        "CommentDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "Name": "CommentTable",
                "Type": "AMAZON_DYNAMODB",
                "ServiceRoleArn": {
                    "Fn::GetAtt": ["CommentIAMRole", "Arn"]
                },
                "DynamoDBConfig": {
                    "AwsRegion": {
                        "Fn::Select": [3, {
                            "Fn::Split": [":", {
                                "Fn::GetAtt": ["CommentTable", "Arn"]
                            }]
                        }]
                    },
                    "TableName": {
                        "Ref": "CommentTable"
                    }
                }
            }
        },
        "GetCommentResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["CommentDataSource", "Name"]
                },
                "FieldName": "getComment",
                "TypeName": "Query",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "ListCommentResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["CommentDataSource", "Name"]
                },
                "FieldName": "listComments",
                "TypeName": "Query",
                "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\":   #if( $context.args.filter )\n    $util.transform.toDynamoDBFilterExpression($ctx.args.filter)\n  #else\n    null\n  #end,\n  \"limit\": $limit,\n  \"nextToken\":   #if( $context.args.nextToken )\n    \"$context.args.nextToken\"\n  #else\n    null\n  #end\n}",
                "ResponseMappingTemplate": "$util.toJson($ctx.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "CreateCommentResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["CommentDataSource", "Name"]
                },
                "FieldName": "createComment",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "## START: Prepare DynamoDB PutItem Request. **\n$util.qr($context.args.input.put(\"createdAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"updatedAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n      \"id\": {\n          \"S\": \"$util.autoId()\"\n    }\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($context.args.input),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#id\": \"id\"\n    }\n  }\n}\n## END: Prepare DynamoDB PutItem Request. **",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "UpdateCommentResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["CommentDataSource", "Name"]
                },
                "FieldName": "updateComment",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#if( $authCondition )\n  #set( $condition = $authCondition )\n$util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n$util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n#else\n  #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  },\n  \"expressionValues\": {}\n} )\n#end\n## Automatically set the updatedAt timestamp. **\n$util.qr($context.args.input.put(\"updatedAt\", $util.time.nowISO8601()))\n$util.qr($context.args.input.put(\"__typename\", \"Comment\"))\n## Update condition if type is @versioned **\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n    $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n    $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))\n#end\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, [\"id\"]).entrySet() )\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entry.key\") )\n$util.qr($expNames.put(\"#$entry.key\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entry.key\", \":$entry.key\"))\n$util.qr($expNames.put(\"#$entry.key\", \"$entry.key\"))\n$util.qr($expValues.put(\":$entry.key\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n    #set( $expression = \"SET\" )\n      #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n    #set( $expression = \"$expression ADD\" )\n      #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n    #set( $expression = \"$expression REMOVE\" )\n      #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n$util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n$util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n      \"id\": {\n          \"S\": \"$context.args.input.id\"\n    }\n  },\n  \"update\": $util.toJson($update),\n  \"condition\": $util.toJson($condition)\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "DeleteCommentResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["CommentDataSource", "Name"]
                },
                "FieldName": "deleteComment",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#if( $authCondition )\n  #set( $condition = $authCondition )\n$util.qr($condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\"))\n$util.qr($condition.expressionNames.put(\"#id\", \"id\"))\n#else\n  #set( $condition = {\n  \"expression\": \"attribute_exists(#id)\",\n  \"expressionNames\": {\n      \"#id\": \"id\"\n  }\n} )\n#end\n#if( $versionedCondition )\n  $util.qr($condition.put(\"expression\", \"($condition.expression) AND $versionedCondition.expression\"))\n    $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))\n      #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )\n    $util.qr($expressionValues.putAll($versionedCondition.expressionValues))\n      #set( $condition.expressionValues = $expressionValues )\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  },\n  \"condition\": $util.toJson($condition)\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "AuthCognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
                "AliasAttributes": ["email"],
                "UserPoolName": {
                    "Ref": "AuthCognitoUserPoolName"
                },
                "Policies": {
                    "PasswordPolicy": {
                        "MinimumLength": 8,
                        "RequireLowercase": true,
                        "RequireNumbers": true,
                        "RequireSymbols": true,
                        "RequireUppercase": true
                    }
                },
                "AutoVerifiedAttributes": ["email"]
            },
            "Condition": "AuthShouldCreateUserPool"
        },
        "AuthCognitoUserPoolNativeClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "ClientName": {
                    "Ref": "AuthCognitoUserPoolMobileClientName"
                },
                "UserPoolId": {
                    "Fn::If": ["AuthShouldCreateUserPool", {
                        "Ref": "AuthCognitoUserPool"
                    }, {
                        "Ref": "AuthCognitoUserPoolId"
                    }]
                },
                "GenerateSecret": true,
                "RefreshTokenValidity": {
                    "Ref": "AuthCognitoUserPoolRefreshTokenValidity"
                },
                "ReadAttributes": [],
                "WriteAttributes": []
            },
            "Condition": "AuthShouldCreateUserPool"
        },
        "AuthCognitoUserPoolJSClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "ClientName": {
                    "Ref": "AuthCognitoUserPoolJSClientName"
                },
                "UserPoolId": {
                    "Fn::If": ["AuthShouldCreateUserPool", {
                        "Ref": "AuthCognitoUserPool"
                    }, {
                        "Ref": "AuthCognitoUserPoolId"
                    }]
                },
                "GenerateSecret": false,
                "RefreshTokenValidity": {
                    "Ref": "AuthCognitoUserPoolRefreshTokenValidity"
                },
                "ReadAttributes": [],
                "WriteAttributes": []
            },
            "Condition": "AuthShouldCreateUserPool"
        },
        "PostcommentsResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["CommentDataSource", "Name"]
                },
                "FieldName": "comments",
                "TypeName": "Post",
                "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Query\",\n  \"query\": {\n      \"expression\": \"#connectionAttribute = :connectionAttribute\",\n      \"expressionNames\": {\n          \"#connectionAttribute\": \"commentPostId\"\n    },\n      \"expressionValues\": {\n          \":connectionAttribute\": {\n              \"S\": \"$context.source.id\"\n      }\n    }\n  },\n  \"scanIndexForward\":   #if( $context.args.sortDirection )\n    #if( $context.args.sortDirection == \"ASC\" )\n  true\n#else\n  false\n#end\n  #else\n    true\n  #end,\n  \"filter\":   #if( $context.args.filter )\n    $util.transform.toDynamoDBFilterExpression($ctx.args.filter)\n  #else\n    null\n  #end,\n  \"limit\": $limit,\n  \"nextToken\":   #if( $context.args.nextToken )\n    \"$context.args.nextToken\"\n  #else\n    null\n  #end,\n  \"index\": \"gsi-PostComments\"\n}",
                "ResponseMappingTemplate": "#if( !$result )\n  #set( $result = $ctx.result )\n#end\n$util.toJson($result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "CommentpostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
                },
                "DataSourceName": {
                    "Fn::GetAtt": ["PostDataSource", "Name"]
                },
                "FieldName": "post",
                "TypeName": "Comment",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.source.commentPostId)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        }
    },
    "Outputs": {
        "GraphQLAPIIdOutput": {
            "Description": "Your GraphQL API ID.",
            "Value": {
                "Fn::GetAtt": ["GraphQLAPI", "ApiId"]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [":", [{
                        "Ref": "AWS::StackName"
                    }, "GraphQLApiId"]]
                }
            }
        },
        "GraphQLAPIEndpointOutput": {
            "Description": "Your GraphQL API endpoint.",
            "Value": {
                "Fn::GetAtt": ["GraphQLAPI", "GraphQLUrl"]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [":", [{
                        "Ref": "AWS::StackName"
                    }, "GraphQLApiEndpoint"]]
                }
            }
        },
        "GraphQLAPIKeyOutput": {
            "Description": "Your GraphQL API key. Provide via 'x-api-key' header.",
            "Value": {
                "Fn::GetAtt": ["GraphQLAPIKey", "ApiKey"]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [":", [{
                        "Ref": "AWS::StackName"
                    }, "GraphQLApiKey"]]
                }
            }
        },
        "AuthCognitoUserPoolNativeClientId": {
            "Description": "Amazon Cognito UserPools native client ID",
            "Value": {
                "Fn::If": ["AuthShouldCreateUserPool", {
                    "Ref": "AuthCognitoUserPoolNativeClient"
                }, {
                    "Fn::Join": [" ", ["See UserPool:", {
                        "Ref": "AuthCognitoUserPoolId"
                    }]]
                }]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [":", [{
                        "Ref": "AWS::StackName"
                    }, "CognitoNativeClient"]]
                }
            }
        },
        "AuthCognitoUserPoolJSClientId": {
            "Description": "Amazon Cognito UserPools JS client ID",
            "Value": {
                "Fn::If": ["AuthShouldCreateUserPool", {
                    "Ref": "AuthCognitoUserPoolJSClient"
                }, {
                    "Fn::Join": [" ", ["See UserPool:", {
                        "Ref": "AuthCognitoUserPoolId"
                    }]]
                }]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [":", [{
                        "Ref": "AWS::StackName"
                    }, "CognitoJSClient"]]
                }
            }
        },
        "AuthCognitoUserPoolIdOutput": {
            "Description": "Amazon Cognito UserPool id",
            "Value": {
                "Fn::If": ["AuthShouldCreateUserPool", {
                    "Ref": "AuthCognitoUserPool"
                }, {
                    "Ref": "AuthCognitoUserPoolId"
                }]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [":", [{
                        "Ref": "AWS::StackName"
                    }, "CognitoUserPoolId"]]
                }
            }
        }
    },
    "Conditions": {
        "AuthShouldCreateUserPool": {
            "Fn::Equals": [{
                "Ref": "AuthCognitoUserPoolId"
            }, "NONE"]
        }
    }
}